name: voting-app-microservices
namespace: voting-app

apps:
  - name: vote
    replicas: 1
    containerPort: 80
    isAutoScalable: true
    image:
      name: 186587923291.dkr.ecr.us-east-2.amazonaws.com/vote # dockersamples/examplevotingapp_vote
      tag: 9ef83ce1a688461585539381dbd5a3b8ed598b14
    service:
      enabled: true
      port: 5000
      type: NodePort
      nodePort: 31002
    volume:
      enabled: false
      mountPath:
    hasEnv: false
    ingress:
      enabled: true
      className: 'nginx'
      annotations:
        {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      hosts:
        - host: 'vote.gabrielibenye.com'
          http:
          paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: vote
                  port:
                    number: 5000

  - name: result
    replicas: 1
    containerPort: 80
    isAutoScalable: false
    image:
      name: 186587923291.dkr.ecr.us-east-2.amazonaws.com/result # dockersamples/examplevotingapp_result
      tag: 9ef83ce1a688461585539381dbd5a3b8ed598b14
    service:
      enabled: true
      port: 5001
      type: NodePort
      nodePort: 31003
    volume:
      enabled: false
      mountPath:
    hasEnv: false
    ingress:
      enabled: true
      className: 'nginx'
      annotations:
        {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      hosts:
        - host: 'result.gabrielibenye.com'
          paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: result
                  port:
                    number: 5001
  - name: redis
    replicas: 1
    containerPort: 6379
    isAutoScalable: false
    image:
      name: redis
      tag: alpine
    service:
      enabled: true
      port: 6379
      type: ClusterIP
      nodePort:
    volume:
      enabled: true
      mountPath: /data
    hasEnv: false

  - name: db
    replicas: 1
    containerPort: 5432
    isAutoScalable: false
    image:
      name: postgres
      tag: 15-alpine
    service:
      enabled: true
      port: 5432
      type: ClusterIP
      nodePort:
    volume:
      enabled: true
      mountPath: /var/lib/postgresql/data
    hasEnv: true
    env:
      - name: POSTGRES_USER
        value: postgres
      - name: POSTGRES_PASSWORD
        value: postgres

  - name: worker
    replicas: 1
    containerPort: 64000
    isAutoScalable: false
    image:
      name: 186587923291.dkr.ecr.us-east-2.amazonaws.com/worker # dockersamples/examplevotingapp_worker
      tag: 9ef83ce1a688461585539381dbd5a3b8ed598b14
    service:
      enabled: false
      port:
      type:
      nodePort:
    volume:
      enabled: false
      mountPath: /data
    hasEnv: false

cronjobs:
  - name: scale-vote-hpa-weekdays
    schedule: '2 8 * * *' # Everyday 12AM
    timeZone: 'America/New_York'
    image:
      name: 186587923291.dkr.ecr.us-east-2.amazonaws.com/scale-vote-hpa
      tag: latest
    restartPolicy: OnFailure
    serviceAccountName: 'scheduled-autoscaler-service-account'

serviceAccounts:
  - name: scheduled-autoscaler-service-account

clusterRoles:
  - name: cluster-hpa-role
    rules:
      - apiGroups: ['autoscaling']
        resources: ['horizontalpodautoscalers']
        verbs: ['*']

clusterRoleBindings:
  - name: cluster-hpa-rolebinding
    subjects:
      - kind: ServiceAccount
        name: scheduled-autoscaler-service-account
        namespace: voting-app
    roleRef:
      kind: ClusterRole
      name: cluster-hpa-role
      apiGroup: rbac.authorization.k8s.io
